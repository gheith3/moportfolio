#!/bin/bash

main() {
    if [ "$IS_WORKER" = "true" ]; then
        exec "$@"
    else
        prepare_file_permissions
        run_npm_build
        prepare_storage
        prepare_database
        wait_for_db
        run_migrations
        optimize_app
        run_server "$@"
    fi
}

prepare_file_permissions() {
    chmod a+x ./artisan
}

run_npm_build() {
    echo "Installing NPM dependencies"
    if [ -f "package.json" ]; then
        echo "Running NPM clean install"
        npm ci

        echo "Running NPM build"
        npm run build
    else
        echo "No package.json found, skipping NPM build"
    fi
}

prepare_storage() {
    # Create required directories for Laravel
    mkdir -p /usr/share/nginx/html/storage/framework/cache/data
    mkdir -p /usr/share/nginx/html/storage/framework/sessions
    mkdir -p /usr/share/nginx/html/storage/framework/views

    # Set permissions for the storage directory
    chown -R www-data:www-data /usr/share/nginx/html/storage
    chmod -R 775 /usr/share/nginx/html/storage

    # Ensure the symlink exists
    php artisan storage:link
}

prepare_database() {
    echo "Preparing SQLite database"
    
    # Create database directory if it doesn't exist
    mkdir -p /usr/share/nginx/html/database
    
    # Create SQLite database file if it doesn't exist
    if [ ! -f "/usr/share/nginx/html/database/database.sqlite" ]; then
        touch /usr/share/nginx/html/database/database.sqlite
    fi
    
    # Set proper permissions for SQLite database
    chown www-data:www-data /usr/share/nginx/html/database/database.sqlite
    chmod 664 /usr/share/nginx/html/database/database.sqlite
    
    # Ensure database directory has proper permissions
    chown -R www-data:www-data /usr/share/nginx/html/database
    chmod 775 /usr/share/nginx/html/database
}

wait_for_db() {
    echo "Checking database connectivity"
    
    # For SQLite, we just need to ensure the file exists and is accessible
    if [ -f "/usr/share/nginx/html/database/database.sqlite" ]; then
        echo "SQLite database file found and accessible"
        return 0
    else
        echo "SQLite database file not found, creating it..."
        prepare_database
    fi
}

run_migrations() {
    echo "Running database migrations"
    ./artisan migrate --force
}

optimize_app() {
    echo "Optimizing Laravel application"
    ./artisan optimize:clear
    ./artisan optimize
}

run_server() {
    exec /usr/local/bin/docker-php-entrypoint "$@"
}

main "$@"
